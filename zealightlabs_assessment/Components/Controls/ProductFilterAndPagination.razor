@page "/product-list"
@inject IProductRepository ProductRepository
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid col-8 mt-5 pt-md-5">
    <!-- Bootstrap Alert Component for Feedback -->
    <BootstrapAlert @ref="alertComponent" />

    <!-- Filters and Search -->
    <div class="filter-container d-flex justify-content-between align-items-center mb-3">
        <div class="d-flex">
            <div class="me-3">
                <label>Category:</label>
                <select @bind="selectedCategory" @bind:event="oninput" @onchange="ApplyFilter" class="form-control">
                    <option value="">All</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category">@category</option>
                    }
                </select>
            </div>

            <div>
                <label>Price Range: @selectedPrice</label>
                <input type="range" min="0" max="1000000" step="50"
                       @bind="selectedPrice"
                       @bind:event="oninput"
                       @onchange="ApplyFilter" class="form-range" />
            </div>
        </div>

        <!-- Search Box with Auto-Suggestions -->
        <div class="search-box position-relative">
            <label>Search:</label>
            <input type="text" @bind="searchQuery" @oninput="DebounceSearch" placeholder="Search products..." class="form-control" />

            <!-- Suggestions List -->
            @if (suggestions.Any())
            {
                <ul class="suggestion-list list-group position-absolute w-100">
                    @foreach (var suggestion in suggestions)
                    {
                        <li class="list-group-item list-group-item-action"
                            @onclick="() => SelectSuggestion(suggestion)">
                            @suggestion
                        </li>
                    }
                </ul>
            }
        </div>

        <button class="btn btn-primary" @onclick="NavigateToCreateProductPage">Add New Product</button>
    </div>

    <!-- Product List -->
    @if (products == null)
    {
        <p>Loading products...</p>
        <div class="skeleton-loader"></div>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price(&#8358;)</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products.Items)
                {
                    <tr>
                        <td>@product.Name</td>
                        <td>@product.Description</td>
                        <td>@product.Price</td>
                        <td>@product.CategoryName</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => NavigateToUpdateProductPage(product.Id)">Update</button>
                            <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(product.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination -->
        <div class="pagination">
            <button @onclick="() => ChangePage(products.PageNumber - 1)" disabled="@(!CanGoToPreviousPage)">Previous</button>

            @for (int i = 1; i <= products.TotalPages; i++)
            {
                <button class="@((i == products.PageNumber) ? "active btn btn-primary" : "btn btn-outline-primary")" @onclick="() => ChangePage(i)">
                    @i
                </button>
            }

            <button @onclick="() => ChangePage(products.PageNumber + 1)" disabled="@(!CanGoToNextPage)">Next</button>
        </div>
    }
</div>

@code {
    private PaginatedList<ProductResponseDto> products;
    private int pageNumber = 1;
    private int pageSize = 10;
    private List<string> categories = new();
    private string selectedCategory = "";
    private int selectedPrice = 1000;
    private string searchQuery = "";
    private List<string> suggestions = new();
    private BootstrapAlert alertComponent;
    private bool showConfirmationDialog = false;
    private int productIdToDelete = 0;
    private CancellationTokenSource debounceToken = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        await LoadProductsAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        categories = await ProductRepository.GetCategoriesAsync();
    }

    private async Task ApplyFilter()
    {
        pageNumber = 1;
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        products = await ProductRepository.GetFilteredPaginatedAsync(pageNumber, pageSize, selectedCategory, selectedPrice, searchQuery);
        StateHasChanged();
    }

    
    private async Task DebounceSearch(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();

        debounceToken.Cancel();
        debounceToken.Dispose();
        debounceToken = new CancellationTokenSource();

        try
        {
            await Task.Delay(300, debounceToken.Token);
            if (!debounceToken.Token.IsCancellationRequested)
            {
                if (!string.IsNullOrWhiteSpace(searchQuery))
                {
                    suggestions = await ProductRepository.GetSearchSuggestionsAsync(searchQuery);
                }
                else
                {
                    suggestions.Clear();
                }
            }
        }
        catch (TaskCanceledException) { }
    }

    private async Task SelectSuggestion(string suggestion)
    {
        searchQuery = suggestion;
        suggestions.Clear();
        await LoadProductsAsync();
    }

    private void NavigateToCreateProductPage()
    {
        Navigation.NavigateTo("/create-product");
    }

    private async Task ChangePage(int newPageNumber)
    {
        if (newPageNumber >= 1 && newPageNumber <= products.TotalPages && newPageNumber != pageNumber)
        {
            pageNumber = newPageNumber;
            await LoadProductsAsync();
        }
    }

    private bool CanGoToPreviousPage => products?.PageNumber > 1;
    private bool CanGoToNextPage => products?.PageNumber < products?.TotalPages;

    private void ShowDeleteConfirmation(int productId)
    {
        productIdToDelete = productId;
        showConfirmationDialog = true;
    }

    private async Task DeleteProductConfirmed()
    {
        try
        {
            var result = await ProductRepository.DeleteAsync(productIdToDelete);

            if (result)
            {
                await ShowAlert("Product deleted successfully!", "success");
                await LoadProductsAsync();
            }
            else
            {
                await ShowAlert("Failed to delete product. Please try again.", "danger");
            }

            showConfirmationDialog = false;
        }
        catch (Exception ex)
        {
            await ShowAlert($"Error: {ex.Message}", "danger");
            showConfirmationDialog = false;
        }
    }

    private async Task ShowAlert(string message, string type)
    {
        alertComponent.ShowAlert(message, type);
    }

    private void NavigateToUpdateProductPage(int productId)
    {
        Navigation.NavigateTo($"/update-product/{productId}");
    }
}
